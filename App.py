# -*- coding: utf-8 -*-
"""App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xCDSuQ7UNT2Ejw9s38XSmk79hF3ogHJt
"""

#pip install streamlit

import streamlit as st
import pandas as pd
import joblib
import gdown

# Download the model from Google Drive using gdown
@st.cache_data  # Caching the model so it doesn't download every time the app reloads
def download_model():
    url = 'https://drive.google.com/uc?id=1-3vf-DNX-qE__rd2c0msJrTpU9iCruLC'
    output = 'model.pkl'
    gdown.download(url, output, quiet=False)
    return joblib.load(output)

# Load the trained model
model = download_model()

# Define function to preprocess input data
def preprocess_input(Age,Gender,Total_Bilirubin,Direct_Bilirubin,Alkaline_Phosphotase,Alamine_Aminotransferase,
                     Aspartate_Aminotransferase,Total_Protiens,Albumin,Albumin_and_Globulin_Ratio):
    # Create a DataFrame with the input data
    input_data = pd.DataFrame({
        'Age': [Age],
        'Gender': [Gender],
        'Total_Bilirubin': [Total_Bilirubin],
        'Direct_Bilirubin': [Direct_Bilirubin],
        'Alkaline_Phosphotase': [Alkaline_Phosphotase],
        'Alamine_Aminotransferase': [Alamine_Aminotransferase],
        'Aspartate_Aminotransferase': [Aspartate_Aminotransferase],
        'Total_Protiens': [Total_Protiens],
        'Albumin': [Albumin],
        'Albumin_and_Globulin_Ratio': [Albumin_and_Globulin_Ratio]
    })

    # Encoding of all categorical variables
    input_data_encoded = pd.get_dummies(input_data)

    # Ensure the input data matches the model's expected features
    model_features = model.feature_names_in_
    for feature in model_features:
        if feature not in input_data_encoded.columns:
            input_data_encoded[feature] = 0  # Add missing features with default value 0

    input_data_encoded = input_data_encoded[model_features]

    return input_data_encoded

# Custom CSS for styling background, button, and widget labels
st.markdown("""
    <style>
    /* Change the background to navy blue */
    .main {
        background-color: #000080;
    }
    /* Style the title */
    .title {
        color: green;
        text-align: center;
        font-size: 40px;
    }
    /* Style for the widget labels (subtitles) */
    label {
        color: red !important;
        font-weight: bold;
    }
    /* Style for the prediction result */
    .prediction-result {
        color: red;
        font-size: 30px;
        text-align: center;
        font-weight: bold;
    }
    /* Style for the predict button */
    .stButton button {
        background-color: red;
        color: white;
        font-size: 20px;
        border-radius: 10px;
        padding: 10px;
    }
    </style>
    """, unsafe_allow_html=True)

# Create the web interface
def main():
    st.markdown('<div class="title">LIVER DISEASE PREDICTION APP</div>', unsafe_allow_html=True)
    Age = st.number_input('Age', min_value=0.0, max_value=120.0)
    Gender = st.selectbox('Gender',['Male', 'Female'])
    Total_Bilirubin = st.number_input('Total Bilirubin', min_value=0.0, max_value=100.0)
    Direct_Bilirubin = st.number_input('Direct Bilirubin', min_value=0.0, max_value=25.0)
    Alkaline_Phosphotase = st.number_input('Alkaline Phosphotase', min_value=0.0, max_value=2500.0)
    Alamine_Aminotransferase = st.number_input('Alamine Aminotransferase', min_value=0.0, max_value=2500.0)
    Aspartate_Aminotransferase = st.number_input('Aspartate Aminotransferase', min_value=0.0, max_value=5000.0)
    Total_Protiens = st.number_input('Total Protiens', min_value=0.0, max_value=15.0)
    Albumin = st.number_input('Albumin', min_value=0.0, max_value=7.0)
    Albumin_and_Globulin_Ratio = st.number_input('Albumin and Globulin Ratio', min_value=0.0, max_value=4.0)

    if st.button('Predict'):
        input_data = preprocess_input(Age,Gender,Total_Bilirubin,Direct_Bilirubin,Alkaline_Phosphotase,Alamine_Aminotransferase,
                                      Aspartate_Aminotransferase,Total_Protiens,Albumin,Albumin_and_Globulin_Ratio)
        try:
            prediction = model.predict(input_data)[0]
            if prediction == 1:
                st.markdown('<div class="prediction-result">Prediction: Presence of Liver Disease</div>', unsafe_allow_html=True)
            elif prediction == 0:
                st.markdown('<div class="prediction-result">Prediction: Absence of Liver Disease</div>', unsafe_allow_html=True)
            else:
                st.markdown('<div class="prediction-result">Prediction: Invalid prediction value</div>', unsafe_allow_html=True)
        except Exception as e:
            st.write(f"An error occurred: {e}")

if __name__ == '__main__':
    main()